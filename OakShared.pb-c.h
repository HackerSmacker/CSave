/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: OakShared.proto */

#ifndef PROTOBUF_C_OakShared_2eproto__INCLUDED
#define PROTOBUF_C_OakShared_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _OakSave__Vec3 OakSave__Vec3;
typedef struct _OakSave__GameStatSaveGameData OakSave__GameStatSaveGameData;
typedef struct _OakSave__InventoryCategorySaveData OakSave__InventoryCategorySaveData;
typedef struct _OakSave__OakSDUSaveGameData OakSave__OakSDUSaveGameData;
typedef struct _OakSave__RegisteredDownloadableEntitlement OakSave__RegisteredDownloadableEntitlement;
typedef struct _OakSave__RegisteredDownloadableEntitlements OakSave__RegisteredDownloadableEntitlements;
typedef struct _OakSave__ChallengeStatSaveGameData OakSave__ChallengeStatSaveGameData;
typedef struct _OakSave__OakChallengeRewardSaveGameData OakSave__OakChallengeRewardSaveGameData;
typedef struct _OakSave__ChallengeSaveGameData OakSave__ChallengeSaveGameData;


/* --- enums --- */


/* --- messages --- */

struct  _OakSave__Vec3
{
  ProtobufCMessage base;
  float x;
  float y;
  float z;
};
#define OAK_SAVE__VEC3__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__vec3__descriptor) \
    , 0, 0, 0 }


struct  _OakSave__GameStatSaveGameData
{
  ProtobufCMessage base;
  int32_t stat_value;
  char *stat_path;
};
#define OAK_SAVE__GAME_STAT_SAVE_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__game_stat_save_game_data__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _OakSave__InventoryCategorySaveData
{
  ProtobufCMessage base;
  uint32_t base_category_definition_hash;
  int32_t quantity;
};
#define OAK_SAVE__INVENTORY_CATEGORY_SAVE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__inventory_category_save_data__descriptor) \
    , 0, 0 }


struct  _OakSave__OakSDUSaveGameData
{
  ProtobufCMessage base;
  int32_t sdu_level;
  char *sdu_data_path;
};
#define OAK_SAVE__OAK_SDUSAVE_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__oak_sdusave_game_data__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _OakSave__RegisteredDownloadableEntitlement
{
  ProtobufCMessage base;
  int32_t id;
  uint32_t consumed;
  protobuf_c_boolean registered;
  protobuf_c_boolean seen;
};
#define OAK_SAVE__REGISTERED_DOWNLOADABLE_ENTITLEMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__registered_downloadable_entitlement__descriptor) \
    , 0, 0, 0, 0 }


struct  _OakSave__RegisteredDownloadableEntitlements
{
  ProtobufCMessage base;
  char *entitlement_source_asset_path;
  size_t n_entitlement_ids;
  int64_t *entitlement_ids;
  size_t n_entitlements;
  OakSave__RegisteredDownloadableEntitlement **entitlements;
};
#define OAK_SAVE__REGISTERED_DOWNLOADABLE_ENTITLEMENTS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__registered_downloadable_entitlements__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  _OakSave__ChallengeStatSaveGameData
{
  ProtobufCMessage base;
  int32_t current_stat_value;
  char *challenge_stat_path;
};
#define OAK_SAVE__CHALLENGE_STAT_SAVE_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__challenge_stat_save_game_data__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  _OakSave__OakChallengeRewardSaveGameData
{
  ProtobufCMessage base;
  protobuf_c_boolean challenge_reward_claimed;
};
#define OAK_SAVE__OAK_CHALLENGE_REWARD_SAVE_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__oak_challenge_reward_save_game_data__descriptor) \
    , 0 }


struct  _OakSave__ChallengeSaveGameData
{
  ProtobufCMessage base;
  int32_t completed_count;
  protobuf_c_boolean is_active;
  protobuf_c_boolean currently_completed;
  int32_t completed_progress_level;
  int32_t progress_counter;
  size_t n_stat_instance_state;
  OakSave__ChallengeStatSaveGameData **stat_instance_state;
  char *challenge_class_path;
  size_t n_challenge_reward_info;
  OakSave__OakChallengeRewardSaveGameData **challenge_reward_info;
};
#define OAK_SAVE__CHALLENGE_SAVE_GAME_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&oak_save__challenge_save_game_data__descriptor) \
    , 0, 0, 0, 0, 0, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL }


/* OakSave__Vec3 methods */
void   oak_save__vec3__init
                     (OakSave__Vec3         *message);
size_t oak_save__vec3__get_packed_size
                     (const OakSave__Vec3   *message);
size_t oak_save__vec3__pack
                     (const OakSave__Vec3   *message,
                      uint8_t             *out);
size_t oak_save__vec3__pack_to_buffer
                     (const OakSave__Vec3   *message,
                      ProtobufCBuffer     *buffer);
OakSave__Vec3 *
       oak_save__vec3__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__vec3__free_unpacked
                     (OakSave__Vec3 *message,
                      ProtobufCAllocator *allocator);
/* OakSave__GameStatSaveGameData methods */
void   oak_save__game_stat_save_game_data__init
                     (OakSave__GameStatSaveGameData         *message);
size_t oak_save__game_stat_save_game_data__get_packed_size
                     (const OakSave__GameStatSaveGameData   *message);
size_t oak_save__game_stat_save_game_data__pack
                     (const OakSave__GameStatSaveGameData   *message,
                      uint8_t             *out);
size_t oak_save__game_stat_save_game_data__pack_to_buffer
                     (const OakSave__GameStatSaveGameData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__GameStatSaveGameData *
       oak_save__game_stat_save_game_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__game_stat_save_game_data__free_unpacked
                     (OakSave__GameStatSaveGameData *message,
                      ProtobufCAllocator *allocator);
/* OakSave__InventoryCategorySaveData methods */
void   oak_save__inventory_category_save_data__init
                     (OakSave__InventoryCategorySaveData         *message);
size_t oak_save__inventory_category_save_data__get_packed_size
                     (const OakSave__InventoryCategorySaveData   *message);
size_t oak_save__inventory_category_save_data__pack
                     (const OakSave__InventoryCategorySaveData   *message,
                      uint8_t             *out);
size_t oak_save__inventory_category_save_data__pack_to_buffer
                     (const OakSave__InventoryCategorySaveData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__InventoryCategorySaveData *
       oak_save__inventory_category_save_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__inventory_category_save_data__free_unpacked
                     (OakSave__InventoryCategorySaveData *message,
                      ProtobufCAllocator *allocator);
/* OakSave__OakSDUSaveGameData methods */
void   oak_save__oak_sdusave_game_data__init
                     (OakSave__OakSDUSaveGameData         *message);
size_t oak_save__oak_sdusave_game_data__get_packed_size
                     (const OakSave__OakSDUSaveGameData   *message);
size_t oak_save__oak_sdusave_game_data__pack
                     (const OakSave__OakSDUSaveGameData   *message,
                      uint8_t             *out);
size_t oak_save__oak_sdusave_game_data__pack_to_buffer
                     (const OakSave__OakSDUSaveGameData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__OakSDUSaveGameData *
       oak_save__oak_sdusave_game_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__oak_sdusave_game_data__free_unpacked
                     (OakSave__OakSDUSaveGameData *message,
                      ProtobufCAllocator *allocator);
/* OakSave__RegisteredDownloadableEntitlement methods */
void   oak_save__registered_downloadable_entitlement__init
                     (OakSave__RegisteredDownloadableEntitlement         *message);
size_t oak_save__registered_downloadable_entitlement__get_packed_size
                     (const OakSave__RegisteredDownloadableEntitlement   *message);
size_t oak_save__registered_downloadable_entitlement__pack
                     (const OakSave__RegisteredDownloadableEntitlement   *message,
                      uint8_t             *out);
size_t oak_save__registered_downloadable_entitlement__pack_to_buffer
                     (const OakSave__RegisteredDownloadableEntitlement   *message,
                      ProtobufCBuffer     *buffer);
OakSave__RegisteredDownloadableEntitlement *
       oak_save__registered_downloadable_entitlement__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__registered_downloadable_entitlement__free_unpacked
                     (OakSave__RegisteredDownloadableEntitlement *message,
                      ProtobufCAllocator *allocator);
/* OakSave__RegisteredDownloadableEntitlements methods */
void   oak_save__registered_downloadable_entitlements__init
                     (OakSave__RegisteredDownloadableEntitlements         *message);
size_t oak_save__registered_downloadable_entitlements__get_packed_size
                     (const OakSave__RegisteredDownloadableEntitlements   *message);
size_t oak_save__registered_downloadable_entitlements__pack
                     (const OakSave__RegisteredDownloadableEntitlements   *message,
                      uint8_t             *out);
size_t oak_save__registered_downloadable_entitlements__pack_to_buffer
                     (const OakSave__RegisteredDownloadableEntitlements   *message,
                      ProtobufCBuffer     *buffer);
OakSave__RegisteredDownloadableEntitlements *
       oak_save__registered_downloadable_entitlements__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__registered_downloadable_entitlements__free_unpacked
                     (OakSave__RegisteredDownloadableEntitlements *message,
                      ProtobufCAllocator *allocator);
/* OakSave__ChallengeStatSaveGameData methods */
void   oak_save__challenge_stat_save_game_data__init
                     (OakSave__ChallengeStatSaveGameData         *message);
size_t oak_save__challenge_stat_save_game_data__get_packed_size
                     (const OakSave__ChallengeStatSaveGameData   *message);
size_t oak_save__challenge_stat_save_game_data__pack
                     (const OakSave__ChallengeStatSaveGameData   *message,
                      uint8_t             *out);
size_t oak_save__challenge_stat_save_game_data__pack_to_buffer
                     (const OakSave__ChallengeStatSaveGameData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__ChallengeStatSaveGameData *
       oak_save__challenge_stat_save_game_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__challenge_stat_save_game_data__free_unpacked
                     (OakSave__ChallengeStatSaveGameData *message,
                      ProtobufCAllocator *allocator);
/* OakSave__OakChallengeRewardSaveGameData methods */
void   oak_save__oak_challenge_reward_save_game_data__init
                     (OakSave__OakChallengeRewardSaveGameData         *message);
size_t oak_save__oak_challenge_reward_save_game_data__get_packed_size
                     (const OakSave__OakChallengeRewardSaveGameData   *message);
size_t oak_save__oak_challenge_reward_save_game_data__pack
                     (const OakSave__OakChallengeRewardSaveGameData   *message,
                      uint8_t             *out);
size_t oak_save__oak_challenge_reward_save_game_data__pack_to_buffer
                     (const OakSave__OakChallengeRewardSaveGameData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__OakChallengeRewardSaveGameData *
       oak_save__oak_challenge_reward_save_game_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__oak_challenge_reward_save_game_data__free_unpacked
                     (OakSave__OakChallengeRewardSaveGameData *message,
                      ProtobufCAllocator *allocator);
/* OakSave__ChallengeSaveGameData methods */
void   oak_save__challenge_save_game_data__init
                     (OakSave__ChallengeSaveGameData         *message);
size_t oak_save__challenge_save_game_data__get_packed_size
                     (const OakSave__ChallengeSaveGameData   *message);
size_t oak_save__challenge_save_game_data__pack
                     (const OakSave__ChallengeSaveGameData   *message,
                      uint8_t             *out);
size_t oak_save__challenge_save_game_data__pack_to_buffer
                     (const OakSave__ChallengeSaveGameData   *message,
                      ProtobufCBuffer     *buffer);
OakSave__ChallengeSaveGameData *
       oak_save__challenge_save_game_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   oak_save__challenge_save_game_data__free_unpacked
                     (OakSave__ChallengeSaveGameData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*OakSave__Vec3_Closure)
                 (const OakSave__Vec3 *message,
                  void *closure_data);
typedef void (*OakSave__GameStatSaveGameData_Closure)
                 (const OakSave__GameStatSaveGameData *message,
                  void *closure_data);
typedef void (*OakSave__InventoryCategorySaveData_Closure)
                 (const OakSave__InventoryCategorySaveData *message,
                  void *closure_data);
typedef void (*OakSave__OakSDUSaveGameData_Closure)
                 (const OakSave__OakSDUSaveGameData *message,
                  void *closure_data);
typedef void (*OakSave__RegisteredDownloadableEntitlement_Closure)
                 (const OakSave__RegisteredDownloadableEntitlement *message,
                  void *closure_data);
typedef void (*OakSave__RegisteredDownloadableEntitlements_Closure)
                 (const OakSave__RegisteredDownloadableEntitlements *message,
                  void *closure_data);
typedef void (*OakSave__ChallengeStatSaveGameData_Closure)
                 (const OakSave__ChallengeStatSaveGameData *message,
                  void *closure_data);
typedef void (*OakSave__OakChallengeRewardSaveGameData_Closure)
                 (const OakSave__OakChallengeRewardSaveGameData *message,
                  void *closure_data);
typedef void (*OakSave__ChallengeSaveGameData_Closure)
                 (const OakSave__ChallengeSaveGameData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor oak_save__vec3__descriptor;
extern const ProtobufCMessageDescriptor oak_save__game_stat_save_game_data__descriptor;
extern const ProtobufCMessageDescriptor oak_save__inventory_category_save_data__descriptor;
extern const ProtobufCMessageDescriptor oak_save__oak_sdusave_game_data__descriptor;
extern const ProtobufCMessageDescriptor oak_save__registered_downloadable_entitlement__descriptor;
extern const ProtobufCMessageDescriptor oak_save__registered_downloadable_entitlements__descriptor;
extern const ProtobufCMessageDescriptor oak_save__challenge_stat_save_game_data__descriptor;
extern const ProtobufCMessageDescriptor oak_save__oak_challenge_reward_save_game_data__descriptor;
extern const ProtobufCMessageDescriptor oak_save__challenge_save_game_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_OakShared_2eproto__INCLUDED */
